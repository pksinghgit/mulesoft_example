<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core"
	version="EE-3.7.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

    <munit:config name="munit" doc:name="Munit configuration"/>

    <spring:beans>
        <spring:import resource="classpath:production-code.xml"/>
    </spring:beans>

    <!-- exampleFlow2 Tests -->
    <munit:test name="doc-test-exampleFlow2Test1" description="Validate calls to sub flows are being done properly ">
        <munit:set payload="#['payload_1']" doc:name="Set Message payload == payload_1"/>
        <flow-ref name="exampleFlow2" doc:name="Flow-ref to exampleFlow2"/>
        <mock:verify-call messageProcessor="mule:sub-flow" doc:name="Verify Call" times="1">
            <mock:with-attributes>
                <mock:with-attribute whereValue="#[matchContains('exampleSub_Flow1')]" name="name"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>

     <munit:test name="doc-test-exampleFlow2Test2" description="Validate calls to sub flows are being done properly ">
        <munit:set payload="#['payload_2']" doc:name="Set Message payload == payload_2"/>
        <flow-ref name="exampleFlow2" doc:name="Flow-ref to exampleFlow2"/>
        <mock:verify-call messageProcessor="mule:sub-flow" doc:name="Verify Call" times="1">
            <mock:with-attributes>
                <mock:with-attribute whereValue="#[matchContains('exampleSub_Flow2')]" name="name"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>

    <!-- exampleFlow Tests -->
    <munit:test name="doc-test-exampleFlow-unit-Test_1" description="Unit Test case asserting scenario 1">
        <mock:when messageProcessor="mule:set-payload" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute whereValue="#['Set Original Payload']" name="doc:name"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor="mule:flow" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute whereValue="#['exampleFlow2']" name="name"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]">
                <mock:invocation-properties>
                    <mock:invocation-property key="my_variable" value="#['var_value_1']"/>
                </mock:invocation-properties>
            </mock:then-return>
        </mock:when>
        <flow-ref name="exampleFlow" doc:name="Flow-ref to exampleFlow"/>
        <munit:assert-payload-equals message="oops, wrong payload!" expectedValue="#['response_payload_1']" doc:name="Assert Payload"/>
    </munit:test>

    <munit:test name="doc-test-exampleFlow-unit-Test_2" description="Unit Test case asserting scenario 2">
        <mock:when messageProcessor="mule:set-payload" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute whereValue="#['Set Original Payload']" name="doc:name"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor="mule:flow" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute whereValue="#['exampleFlow2']" name="name"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]">
                <mock:invocation-properties>
                    <mock:invocation-property key="my_variable" value="#['var_value_2']"/>
                </mock:invocation-properties>
            </mock:then-return>
        </mock:when>
        <flow-ref name="exampleFlow" doc:name="Flow-ref to exampleFlow"/>
        <munit:assert-payload-equals message="oops, wrong payload!" expectedValue="#['response_payload_2']" doc:name="Assert Payload"/>
    </munit:test>

    <!-- exampleFlow Functional Tests -->
    <munit:test name="doc-test-exampleFlow-functionalTest_1" description="Funtional Test case asserting scenario 1">
        <munit:set payload="#['']" doc:name="Set Message url_key:payload_1">
            <munit:inbound-properties>
                <munit:inbound-property key="http.query.params" value="#[['url_key':'payload_1']]"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="exampleFlow" doc:name="Flow-ref to exampleFlow"/>
        <munit:assert-payload-equals message="oops, wrong payload!" expectedValue="#['response_payload_1']" doc:name="Assert Payload"/>
    </munit:test>

    <munit:test name="doc-test-exampleFlow-functionalTest_2" description="Funtional Test case asserting scenario 2">
        <munit:set payload="#['']" doc:name="Set Message url_key:payload_1">
            <munit:inbound-properties>
                <munit:inbound-property key="http.query.params" value="#[['url_key':'payload_2']]"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="exampleFlow" doc:name="Flow-ref to exampleFlow"/>
        <munit:assert-payload-equals message="oops, wrong payload!" expectedValue="#['response_payload_2']" doc:name="Assert Payload"/>
    </munit:test>

</mule>